import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import axios from 'axios'
import './Auth.css'

const AuthPage = () => {
  const [isLogin, setIsLogin] = useState(true)
  const [isLoading, setIsLoading] = useState(false)
  const [errors, setErrors] = useState({})
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    confirmPassword: '',
  })
  const navigate = useNavigate()

  // –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
  const API_BASE_URL = 'http://localhost:8080/api'

  // –°–æ–∑–¥–∞–µ–º axios instance —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const api = axios.create({
    baseURL: API_BASE_URL,
    timeout: 10000,
  })

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }))

    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: '',
      }))
    }
  }

  const validateForm = () => {
    const newErrors = {}

    if (!formData.username.trim()) {
      newErrors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
    }

    if (!formData.password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (formData.password.length < 6) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
    }

    if (!isLogin) {
      if (!formData.confirmPassword) {
        newErrors.confirmPassword = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      } else if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
      }
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

  const handleRegister = async () => {
    try {
      const response = await api.post('/auth/register', {
        username: formData.username,
        password: formData.password,
      })

      if (response.status === 200) {
        return response.data.userId
      }
    } catch (error) {
      if (error.response?.data) {
        throw new Error(error.response.data)
      } else if (error.code === 'NETWORK_ERROR') {
        throw new Error(
          '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥.',
        )
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
      }
    }
  }

  const handleLogin = async () => {
    try {
      const response = await api.post('/auth/login', {
        username: formData.username,
        password: formData.password,
      })

      if (response.status === 200) {
        const userData = response.data

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
        const userStorage = {
          userId: userData.id,
          username: userData.username,
          isAuthenticated: true,
          loginTime: new Date().toISOString(),
        }
        localStorage.setItem('user', JSON.stringify(userStorage))

        return userData
      }
    } catch (error) {
      if (error.response?.status === 401) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
      } else if (error.response?.data) {
        throw new Error(error.response.data)
      } else if (error.code === 'NETWORK_ERROR') {
        throw new Error(
          '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥.',
        )
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
      }
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    if (!validateForm()) {
      return
    }

    setIsLoading(true)
    setErrors({})

    try {
      let result
      if (isLogin) {
        // –õ–æ–≥–∏–Ω
        result = await handleLogin()
        alert('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
      } else {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        result = await handleRegister()
        alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')

        // –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏–Ω–∏–º—Å—è
        if (result) {
          await handleLogin()
        }
      }

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /home –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      navigate('/home')

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setFormData({
        username: '',
        password: '',
        confirmPassword: '',
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
      setErrors({ submit: error.message })
    } finally {
      setIsLoading(false)
    }
  }

  const switchMode = () => {
    setIsLogin(!isLogin)
    setErrors({})
    setFormData({
      username: '',
      password: '',
      confirmPassword: '',
    })
  }

  return (
    <div className="auth-page">
      {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è */}
      <div className="auth-hero">
        <div className="hero-content">
          <div className="logo">
            <div className="logo-icon">üí∞</div>
            <h1>Purse</h1>
          </div>
          <h2>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</h2>
          <p>
            –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏
            —Ä–∞—Å—Ö–æ–¥–æ–≤
          </p>
          <div className="features">
            <div className="feature">
              <span className="feature-icon">üìä</span>
              <span>–£—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤</span>
            </div>
            <div className="feature">
              <span className="feature-icon">‚ö°</span>
              <span>–ü—Ä–æ—Å—Ç–æ—Ç–∞</span>
            </div>
            <div className="feature">
              <span className="feature-icon">üîí</span>
              <span>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</span>
            </div>
          </div>
        </div>
      </div>

      {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ñ–æ—Ä–º–∞ */}
      <div className="auth-section">
        <div className="auth-container">
          <div className="auth-card">
            <div className="auth-header">
              <h2>{isLogin ? '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
              <p className="auth-subtitle">
                {isLogin ? '–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'}
              </p>
            </div>

            <form onSubmit={handleSubmit} className="auth-form">
              <div className="form-group">
                <label htmlFor="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <input
                  type="text"
                  id="username"
                  name="username"
                  value={formData.username}
                  onChange={handleChange}
                  required
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                  className={`modern-input ${errors.username ? 'error' : ''}`}
                />
                {errors.username && (
                  <span className="error-message">{errors.username}</span>
                )}
              </div>

              <div className="form-group">
                <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
                <input
                  type="password"
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  required
                  placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                  minLength="6"
                  className={`modern-input ${errors.password ? 'error' : ''}`}
                />
                {errors.password && (
                  <span className="error-message">{errors.password}</span>
                )}
              </div>

              {!isLogin && (
                <div className="form-group">
                  <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                  <input
                    type="password"
                    id="confirmPassword"
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleChange}
                    required={!isLogin}
                    placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    minLength="6"
                    className={`modern-input ${
                      errors.confirmPassword ? 'error' : ''
                    }`}
                  />
                  {errors.confirmPassword && (
                    <span className="error-message">
                      {errors.confirmPassword}
                    </span>
                  )}
                </div>
              )}

              {/* –û–±—â–∞—è –æ—à–∏–±–∫–∞ */}
              {errors.submit && (
                <div className="error-message submit-error">
                  {errors.submit}
                </div>
              )}

              <button
                type="submit"
                className="submit-btn modern-btn"
                disabled={isLoading}
              >
                {isLoading
                  ? '–ó–∞–≥—Ä—É–∑–∫–∞...'
                  : isLogin
                  ? '–í–æ–π—Ç–∏'
                  : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
              </button>
            </form>

            <div className="auth-switch">
              <p>
                {isLogin ? '–ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'}{' '}
                <button
                  className="switch-link"
                  onClick={switchMode}
                  type="button"
                >
                  {isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'}
                </button>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default AuthPage
